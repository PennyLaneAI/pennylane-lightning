#!/usr/bin/python3

import argparse
import json
import pathlib
import re
import shutil
import subprocess
import sys
from utils import get_cpp_files
from conf import CPP_SOURCE_DIRS_FORMAT

CLANG_FMT_BIN = "clang-format"
CLANG_FMT_STYLE_CFG = {
    "BasedOnStyle": "llvm",
    "BreakBeforeBraces": "Attach",
    "IndentWidth": 4,
    "IndentPPDirectives": "None",
}

IGNORE_PATTERNS = ["external"]

DEFAULT_CLANG_FORMAT_VERSION=11

BASE_ARGS = [f"-style={json.dumps(CLANG_FMT_STYLE_CFG)}"]

CPP_FILES_TO_FORMAT = get_cpp_files(CPP_SOURCE_DIRS_FORMAT, IGNORE_PATTERNS)

def parse_version(version_string):
    version_rgx = "version (\d+)"

    m = re.search(version_rgx, version_string)
    return int(m.group(1))

def clang_format_command():
    command = f"clang-format-{DEFAULT_CLANG_FORMAT_VERSION}"

    if shutil.which(command) is None:
        print(f"{command} is not found. Find default clang-format instead.")
        command = "clang-format"
        if shutil.which(command) is None:
            print(f"Default clang-format is not found.")
            raise FileNotFoundError("clang-format is not installed or is not in PATH.")
        else:
            p = subprocess.run([command, "--version"], stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT, universal_newlines=True)
            version = parse_version(p.stdout)

            if version < DEFAULT_CLANG_FORMAT_VERSION:
                print(f"clang-format version {version} is found. "
                       "Note that this is lower than the default version. ")

    return command


def parse_args():
    parser = argparse.ArgumentParser(
        description="Opinionated C/C++ formatter. Based on clang-format"
    )
    parser.add_argument(
        "-c",
        "--check",
        action="store_true",
        help="don't write files, just return status. "
        "A non-zero return code indicates some files would be re-formatted",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="print detailed information about format violations",
    )

    return parser.parse_args()

def fmt(command) -> int:
    cmd = (command, *BASE_ARGS, "-i", *CPP_FILES_TO_FORMAT)

    sys.stderr.write(f"Formatting {len(CPP_FILES_TO_FORMAT)} files in {CPP_SOURCE_DIRS_FORMAT}.\n")

    ret = subprocess.run(cmd, capture_output=True, universal_newlines=True)
    if ret.returncode != 0:
        sys.stderr.write(ret.stderr)
        return 1

    return 0


def check(command, is_verbose) -> int:
    cmd = (command, *BASE_ARGS, "--dry-run", "-Werror")

    needs_reformatted_ct = 0

    for src_file in CPP_FILES_TO_FORMAT:
        ret = subprocess.run(
            (*cmd, src_file), capture_output=True, universal_newlines=True
        )

        if ret.returncode != 0:
            sys.stderr.write(f"Error: {src_file} would be reformatted.\n")
            if args.verbose:
                sys.stderr.write(ret.stderr)

            needs_reformatted_ct += 1

    sys.stderr.write(f"{needs_reformatted_ct} files would be re-formatted.\n")
    sys.stderr.write(f"{len(CPP_FILES_TO_FORMAT) - needs_reformatted_ct} would be left unchanged.\n")

    return needs_reformatted_ct


if __name__ == "__main__":
    command = clang_format_command()
    args = parse_args()

    if args.check:
        ret = check(command, args.verbose)
    else:
        ret = fmt(command)

    sys.exit(int(ret > 0))
