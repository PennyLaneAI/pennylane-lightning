schema = 2

# The union of all gate types listed in this section must match what
# the device considers "supported" through PennyLane's device API.
[operators.gates.native]

Identity               = { properties = [ "invertible", "differentiable" ] }
PauliX                 = { properties = [ "invertible", "differentiable" ] }
PauliY                 = { properties = [ "invertible", "differentiable" ] }
PauliZ                 = { properties = [ "invertible", "differentiable" ] }
Hadamard               = { properties = [ "invertible", "differentiable" ] }
S                      = { properties = [ "invertible", "differentiable" ] }
T                      = { properties = [ "invertible", "differentiable" ] }
PhaseShift             = { properties = [ "invertible", "differentiable" ] }
RX                     = { properties = [ "invertible", "differentiable" ] }
RY                     = { properties = [ "invertible", "differentiable" ] }
RZ                     = { properties = [ "invertible", "differentiable" ] }
Rot                    = { properties = [ "invertible",                  ] }
CNOT                   = { properties = [ "invertible", "differentiable" ] }
CY                     = { properties = [ "invertible", "differentiable" ] }
CZ                     = { properties = [ "invertible", "differentiable" ] }
SWAP                   = { properties = [ "invertible", "differentiable" ] }
CSWAP                  = { properties = [ "invertible", "differentiable" ] }
Toffoli                = { properties = [ "invertible", "differentiable" ] }
IsingXX                = { properties = [ "invertible", "differentiable" ] }
IsingXY                = { properties = [ "invertible", "differentiable" ] }
IsingYY                = { properties = [ "invertible", "differentiable" ] }
IsingZZ                = { properties = [ "invertible", "differentiable" ] }
ControlledPhaseShift   = { properties = [ "invertible", "differentiable" ] }
CRX                    = { properties = [ "invertible", "differentiable" ] }
CRY                    = { properties = [ "invertible", "differentiable" ] }
CRZ                    = { properties = [ "invertible", "differentiable" ] }
CRot                   = { properties = [ "invertible",                  ] }
SingleExcitation       = { properties = [ "invertible", "differentiable" ] }
SingleExcitationPlus   = { properties = [ "invertible", "differentiable" ] }
SingleExcitationMinus  = { properties = [ "invertible", "differentiable" ] }
DoubleExcitation       = { properties = [ "invertible", "differentiable" ] }
DoubleExcitationPlus   = { properties = [ "invertible", "differentiable" ] }
DoubleExcitationMinus  = { properties = [ "invertible", "differentiable" ] }
MultiRZ                = { properties = [ "invertible", "differentiable" ] }
QubitUnitary           = { properties = [ "invertible",                  ] }
GlobalPhase            = { properties = [ "invertible", "differentiable" ] }

# Operators that should be decomposed according to the algorithm used
# by PennyLane's device API.
# Optional, since gates not listed in this list will typically be decomposed by
# default, but can be useful to express a deviation from this device's regular
# strategy in PennyLane.
[operators.gates.decomp]

BasisState             = {}
QubitStateVector       = {}
StatePrep              = {}
MultiControlledX       = {}

# Gates which should be translated to QubitUnitary
[operators.gates.matrix]

BlockEncode            = {properties = [ "controllable" ]}
GlobalPhase            = {properties = [ "controllable" ]}
ControlledQubitUnitary = {}
ECR                    = {}
SX                     = {}
ISWAP                  = {}
PSWAP                  = {}
SISWAP                 = {}
SQISW                  = {}
OrbitalRotation        = {}
QubitCarry             = {}
QubitSum               = {}
DiagonalQubitUnitary   = {}

# Observables supported by the device
[operators.observables]

Identity               = { properties = [ "differentiable" ] }
PauliX                 = { properties = [ "differentiable" ] }
PauliY                 = { properties = [ "differentiable" ] }
PauliZ                 = { properties = [ "differentiable" ] }
Hadamard               = { properties = [ "differentiable" ] }
Hermitian              = { properties = [ "differentiable" ] }
Hamiltonian            = { properties = [ "differentiable" ] }
SparseHamiltonian      = { properties = [ "differentiable" ] }
Sum                    = { properties = [ "differentiable" ] }
SProd                  = { properties = [ "differentiable" ] }
Prod                   = { properties = [ "differentiable" ] }
Exp                    = { properties = [ "differentiable" ] }
LinearCombination      = { properties = [ "differentiable" ] }

[measurement_processes]

Expval                 = {}
Var                    = {}
Probs                  = {}
State                  = { condition = [ "analytic" ] }
Sample                 = { condition = [ "finiteshots" ] }
Counts                 = { condition = [ "finiteshots" ] }

[compilation]
# If the device is compatible with qjit
qjit_compatible = true
# If the device requires run time generation of the quantum circuit.
runtime_code_generation = false
# If the device supports mid circuit measurements natively
mid_circuit_measurement = true

# This field is currently unchecked but it is reserved for the purpose of
# determining if the device supports dynamic qubit allocation/deallocation.
dynamic_qubit_management = false

# whether the device can support non-commuting measurements together 
# in a single execution
non_commuting_observables = true

# Whether the device supports (arbitrary) initial state preparation.
initial_state_prep = true
