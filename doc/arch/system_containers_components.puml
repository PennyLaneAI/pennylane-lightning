@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
' uncomment the following line and comment the first to use locally
' !include C4_Context.puml

LAYOUT_TOP_DOWN()

title Component-level diagram for PennyLane Lightning

Person(developer, "Quantum software developer")
System(python, "Python", "Python 3.7+")

System(pennylane, "PennyLane", "PennyLane quantum simulation library")

System_Boundary(pennylane, "PennyLane") {
    Container(other, "Other", "Catch-all for rest of PennyLane library and tooling")
    Container(default_qubit, "default.qubit", "PennyLane Python-only simulation device")

    Container_Boundary(lightning, "lightning-qubit") {
        Component(lightning_qubit, "lightning_qubit", "C++/Python", "Python module front-end for C++ operations")

        Component(statevector, "StateVector", "C++", "C++ class for directly manipulating statevector data")
        Component(utils, "Utils", "C++", "Helper utilities for C++ operations")
        Component(gates, "Gates", "C++", "const/constexpr numerical representations of gates")
        Component(bindings, "Bindings", "C++, Pybind11", "Binds C++ classes, methods and functions to Python layer.")
        Component(algorithms, "Algorithms", "C++, Pybind11", "Defines the algorithms and methods using the statevector implementation.")
    }
}

Rel_Neighbor(lightning_qubit, bindings, "Uses", "Bound methods wrapped to interface with PennyLane library")
Rel(bindings, statevector, "Uses", "Wraps statevector to manipulate data using C++")
Rel(bindings, algorithms, "Uses", "Ensures offloading of statevector for given algorithms")
Rel(statevector, utils, "Uses")
Rel(statevector, gates, "Uses", "Used for creation of specific gate application kernels")
Rel(algorithms, utils, "Uses")
Rel_Neighbor(algorithms, statevector, "Uses", "Algorithms use the available gate methods provided by the statevector")

System_Ext(tests, "Tests", "C++, CMake, Catch2")
Rel(tests, lightning, "Uses")

Rel_Neighbor(other, default_qubit, "Uses", "Quantum circuit \n backends")
Lay_L(other, default_qubit)

Lay_D(python, other)

Rel_Neighbor(developer, python, "Uses", "Win/MacOS/Lnx")

Rel(python, other, "Uses")

Rel(default_qubit, lightning_qubit, "Ops and data pointer", "Provides default \n Python plugin methods")

@enduml