@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
' uncomment the following line and comment the first to use locally
' !include C4_Context.puml

LAYOUT_TOP_DOWN()

title Component-level diagram for PennyLane Lightning

Person(developer, "Quantum software developer")
System(python, "Python", "Python 3.7+")

System(pennylane, "PennyLane", "PennyLane quantum simulation library")

System_Boundary(pennylane, "PennyLane") {
    Container(other, "Other", "Catch-all for full PennyLane library and tools")
    Container(default_qubit, "default.qubit", "PennyLane Python-only simulation device")

    Container_Boundary(lightning, "lightning-qubit") {
        Component(lightning_qubit, "lightning_qubit", "C++/Python", "Python module front-end for C++ operations")

        Component(statevector, "StateVector", "C++", "C++ class for directly manipulating statevector data")
        Component(utils, "Utils", "C++", "Helper utilities for C++ operations")
        Component(gates, "Gates", "C++", "const/constexpr numerical representations of gates")
        Component(bindings, "Bindings", "C++, Pybind11", "Binds C++ classes, methods and functions to Python layer.")
    }
}

Rel(lightning_qubit, bindings, "Uses", "Bound methods wrapped to interface with PennyLane library")
Rel(bindings, statevector, "Uses", "Wraps statevector to manipulate data using C++")
Rel_Neighbor(statevector, utils, "Uses")

System_Ext(tests, "Tests", "C++, CMake, Catch2")
Rel(tests, bindings, "Uses")
Rel(tests, gates, "Uses")

Rel_Neighbor(default_qubit, other, "Returns results")
Rel_Neighbor(other, default_qubit, "Uses")


Rel(developer, python, "Uses", "Win/MacOS/Lnx")

Rel(python, pennylane, "Uses")
Rel(pennylane, python, "Experiment results")

Rel(default_qubit, lightning_qubit, "Uses", "Inherits from")

@enduml