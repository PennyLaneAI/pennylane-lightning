name: Wheel::Windows::x86_64

# **What it does**: Builds python wheels for Windows (windows-latest) and store it as artifacts.
#                   Python versions: 3.7, 3.8, 3.9, 3.10.
# **Why we have it**: To build wheels for pennylane-lightning installation.
# **Who does it impact**: Wheels to be uploaded to PyPI.

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types: [published]

env:
  DISTUTILS_USE_SDK: 1
  MSSdk: 1
  PYTHON3_MIN_VERSION: "7"
  PYTHON3_MAX_VERSION: "10"

jobs:
  win-set-matrix-x86:
    name: Set builder matrix versions
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - id: pyver
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }})"
          else
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }} \
              --range)"
          fi
    outputs:
      matrix: ${{ steps.pyver.outputs.matrix }}

  win-wheels:
    needs: [win-set-matrix-x86]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        py_version: ${{fromJson(needs.win-set-matrix-x86.outputs.matrix)}}
    name: ${{ matrix.os }} (Python ${{ fromJson('{ "cp37-*":"3.7","cp38-*":"3.8","cp39-*":"3.9","cp310-*":"3.10" }')[matrix.py_version] }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Get git branch name
        id: branch-name
        uses: tj-actions/branch-names@v5

      - name: Enable long paths
        run: |
          powershell.exe New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: ${{ fromJson('{ "cp37-*":"3.7","cp38-*":"3.8","cp39-*":"3.9","cp310-*":"3.10.5" }')[matrix.py_version] }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.8.1

      - name: Build wheels
        run: |
          Subst Z: (pwd)
          Set-Location -Path "Z:\"
          python -m pip install wheel cmake ninja build
          python setup.py bdist_wheel
          Set-Location -Path ".\dist"
          foreach ($i in Get-ChildItem -Path .\*.whl){
            python -m wheel unpack $i.Name
            $name = $i.Name
            $dirName = python -c "s = '$name'; print('-'.join(s.split('-')[0:2]))"
            if (Test-Path -Path $dirName\pennylane_lightning\Debug) {
              Move-Item -Path $dirName\pennylane_lightning\Debug\* -Destination $dirName\pennylane_lightning
              Remove-Item $dirName\pennylane_lightning\Debug -Recurse
              python -m wheel pack $dirName
            }
            Remove-Item $dirName -Recurse
          }

      - name: Test wheel
        run: |
          Set-Location -Path "Z:\"
          foreach ($i in Get-ChildItem -Path Z:\dist\*.whl){ python -m pip install $i }
          python -m pip install git+https://github.com/PennyLaneAI/pennylane.git@master && `
          python -m pip install pytest pytest-cov pytest-mock flaky && `
          pl-device-test --device=lightning.qubit --skip-ops -x --tb=short --no-flaky-report

      - uses: actions-ecosystem/action-regex-match@v2
        id: rc_build
        with:
          text: ${{ github.event.pull_request.head.ref }}
          regex: '.*[0-9]+.[0-9]+.[0-9]+[-_]?rc[0-9]+'

      - uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master' || steps.rc_build.outputs.match != ''}}
        with:
          name: ${{ runner.os }}-wheels.zip
          path: Z:\dist\*.whl

  upload-pypi:
    needs: win-wheels
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master'}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Windows-wheels.zip
          path: dist

      - name: Upload wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
