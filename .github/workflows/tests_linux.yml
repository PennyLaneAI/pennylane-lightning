name: Testing (Linux)
on:
  pull_request:
  push:
    branches:
      - master

env:
  TF_VERSION: 2.10.0
  TORCH_VERSION: 1.11.0+cpu
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing --cov-report=xml:./coverage.xml --no-flaky-report -p no:warnings --tb=native"
  GCC_VERSION: 11
  OMP_NUM_THREADS: "2"

jobs:
  cpptests:
    strategy:
      matrix:
        os: [ubuntu-22.04]

    name: C++ tests (Linux)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  ninja-build gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=ON -DENABLE_KOKKOS=OFF -DENABLE_PYTHON=OFF -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            ./runner --order lex --reporter junit --out ./tests/results/report_${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports
          path: ./Build/tests/results/report_${{ github.job }}.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake . -BBuildCov -DCMAKE_BUILD_TYPE=Debug -DENABLE_KOKKOS=OFF -DENABLE_PYTHON=OFF -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./BuildCov
            cd ./BuildCov
            ./runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./BuildCov/coverage-${{ github.job }}.info

  pythontests:
    strategy:
      matrix:
        os: [ubuntu-22.04]

    name: Python tests
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="ENABLE_KOKKOS=OFF;ENABLE_PYTHON=ON;CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          mv coverage.xml coverage-${{ github.job }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./main/coverage-${{ github.job }}.xml

  cpptestswithOpenBLAS:
    strategy:
      matrix:
        os: [ubuntu-22.04]

    name: C++ tests (Linux, OpenBLAS)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  libopenblas-dev ninja-build gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_KOKKOS=OFF -DENABLE_PYTHON=OFF -DENABLE_BLAS=ON -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            ./runner --order lex --reporter junit --out ./tests/results/report_${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports
          path: ./Build/tests/results/report_${{ github.job }}.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake . -BBuildCov -DCMAKE_BUILD_TYPE=Debug -DENABLE_KOKKOS=OFF -DENABLE_PYTHON=OFF -DENABLE_BLAS=ON -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./BuildCov
            cd ./BuildCov
            ./runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./BuildCov/coverage-${{ github.job }}.info

  pythontestswithBLAS:
    strategy:
      matrix:
        os: [ubuntu-22.04]

    name: Python tests with OpenBLAS
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  libopenblas-dev

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="ENABLE_BLAS=ON;ENABLE_KOKKOS=OFF;ENABLE_PYTHON=ON;CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          mv coverage.xml coverage-${{ github.job }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./main/coverage-${{ github.job }}.xml

  build_and_cache_Kokkos:
    name: "Build and cache Kokkos and Kokkos Kernels"
    uses: ./.github/workflows/build_and_cache_Kokkos_linux.yml
    with:
      os: ubuntu-22.04

  cpptestswithKokkos:
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-22.04]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}

    name: C++ tests (Linux, Kokkos and Kokkos Kernels)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        run: |
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  ninja-build gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_KOKKOS=ON -DENABLE_PYTHON=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            ./runner --order lex --reporter junit --out ./tests/results/report_${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports
          path: ./Build/tests/results/report_${{ github.job }}.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake . -BBuildCov -DCMAKE_BUILD_TYPE=Debug -DENABLE_KOKKOS=ON -DENABLE_PYTHON=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./BuildCov
            cd ./BuildCov
            ./runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./BuildCov/coverage-${{ github.job }}.info

  pythontestswithKokkos:
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-22.04]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}

    name: Python tests with Kokkos and Kokkos Kernels
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        run: |
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/
          pwd

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="CMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos;ENABLE_KOKKOS=ON;ENABLE_PYTHON=ON;CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          mv coverage.xml coverage-${{ github.job }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./main/coverage-${{ github.job }}.xml

  cpptestswithKokkosAndOpenBLAS:
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-22.04]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}

    name: C++ tests (Linux, OpenBLAS, Kokkos and Kokkos Kernels)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        run: |
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  libopenblas-dev ninja-build gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_BLAS=ON -DENABLE_KOKKOS=ON -DENABLE_PYTHON=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            ./runner --order lex --reporter junit --out ./tests/results/report_${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports
          path: ./Build/tests/results/report_${{ github.job }}.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake . -BBuildCov -DCMAKE_BUILD_TYPE=Debug -DENABLE_BLAS=ON -DENABLE_KOKKOS=ON -DENABLE_PYTHON=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)" -G Ninja
            cmake --build ./BuildCov
            cd ./BuildCov
            ./runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./BuildCov/coverage-${{ github.job }}.info

  pythontestswithKokkosAndOpenBLAS:
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-22.04]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}

    name: Python tests with OpenBLAS, Kokkos and Kokkos Kernels
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        run: |
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/
          pwd

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  libopenblas-dev

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="ENABLE_BLAS=ON;ENABLE_KOKKOS=ON;DENABLE_PYTHON=ON;CMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos;CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          mv coverage.xml coverage-${{ github.job }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./main/coverage-${{ github.job }}.xml

  upload-to-codecov-linux-python:
    needs: [pythontests, pythontestswithBLAS, pythontestswithKokkos, pythontestswithKokkosAndOpenBLAS]
    name: Upload coverage data to codecov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-codecov-results-python

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  upload-to-codecov-linux-cpp:
    needs: [cpptests, cpptestswithOpenBLAS, cpptestswithKokkos, cpptestswithKokkosAndOpenBLAS]
    name: Upload coverage data to codecov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
