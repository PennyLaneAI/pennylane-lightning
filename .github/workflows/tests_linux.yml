name: Testing (Linux)
on:
  push:
    branches:
      - master
  pull_request:

env:
  TF_VERSION: 2.6.0
  TORCH_VERSION: 1.10.0+cpu
  GCC_VERSION: 10
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing --cov-report=xml:./coverage.xml --no-flaky-report -p no:warnings --tb=native"
  OMP_NUM_THREADS: "2"

jobs:
  cpptests:
    name: C++ tests (Linux)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 2 # for codecov

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-10 g++-10 gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild  -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./Build
            mkdir -p ./Build/tests/results
            ./Build/pennylane_lightning/src/tests/runner --order lex --reporter junit --out ./Build/tests/results/report.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ubuntu-test-report
          path: Build/tests/results/report.xml

      - name: Build and run unit tests for code Coverage
        run: |
            cmake pennylane_lightning/src -BBuildCov  -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./BuildCov
            cd ./BuildCov
            ./tests/runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./BuildCov/coverage.info
          fail_ci_if_error: true

  cpptestswithblas:
    name: C++ tests (Linux, OpenBLAS)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-10 g++-10 libopenblas-dev gcovr lcov

      - name: Build and run unit tests
        run: |
            cmake . -BBuild  -DCMAKE_BUILD_TYPE=Release -DENABLE_BLAS=ON -DBUILD_TESTS=1 -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./Build
            mkdir -p ./Build/tests/results
            ./Build/pennylane_lightning/src/tests/runner --order lex --reporter junit --out ./Build/tests/results/report.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ubuntu-test-report
          path: Build/tests/results/report.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake pennylane_lightning/src -BBuildCov  -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DENABLE_BLAS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./BuildCov
            cd ./BuildCov
            ./tests/runner
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./BuildCov/coverage.info
          fail_ci_if_error: true

  cpptestswithkokkos:
    name: C++ tests (Linux, Kokkos and Kokkos Kernels)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-10 g++-10 gcovr lcov

      - name: Build and run unit tests for code coverage
        run: |
            cmake pennylane_lightning/src -BBuildCov -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON -DENABLE_KOKKOS=ON -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./BuildCov --parallel 2
            cd ./BuildCov
            mkdir -p ./tests/results
            ./tests/runner --order lex --reporter junit --out ./tests/results/report.xml
            lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./BuildCov/coverage.info
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ubuntu-test-report
          path: BuildCov/tests/results/report.xml

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Test Report (Linux, Kokkos, and Kokkos Kernels) on Ubuntu
          files: BuildCov/tests/results/report.xml

  cppbenchmarksuite:
    name: C++ Benchmark Suite (Linux, OpenBLAS)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-10 g++-10 libopenblas-dev gcovr lcov

      - name: Build and run gbenchmark
        run: |
            cmake pennylane_lightning/src/ -BBuildGBench -DBUILD_BENCHMARKS=ON -DENABLE_BLAS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER="$(which g++-$GCC_VERSION)"
            cmake --build ./BuildGBench
            ./BuildGBench/benchmarks/utils
            ./BuildGBench/benchmarks/apply_operations

  pythontests:
    name: Python tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v2
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-10 g++-10

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip uninstall pennylane -y
          pip install git+https://github.com/PennyLaneAI/pennylane.git

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./main/coverage.xml
          fail_ci_if_error: true

  pythontestsKokkos:
    name: Python tests with Kokkos and Kokkos Kernels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v2
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc g++

      - name: Get required Python packages
        run: |
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip uninstall pennylane -y
          pip install git+https://github.com/PennyLaneAI/pennylane.git

      - name: Install ML libraries for interfaces
        run: |
          pip install --upgrade torch==$TORCH_VERSION -f https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --upgrade "jax[cpu]"  # This also installs jaxlib
          pip install --upgrade tensorflow~=$TF_VERSION keras~=$TF_VERSION

      - name: Install lightning.qubit device
        run: |
          cd main
          python setup.py build_ext -i --define="ENABLE_KOKKOS=ON;CMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)"
          pip install -e .

      - name: Run PennyLane-Lightning unit tests
        run: |
          cd main/
          pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./main/coverage.xml
          fail_ci_if_error: true
