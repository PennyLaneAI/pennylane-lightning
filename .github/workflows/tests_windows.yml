name: Testing (Windows)
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  cpptests:
    name: C++ tests (Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Configure MSVC for amd64 # Use cl.exe as a default compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Setup OpenCppCoverage and add to PATH
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Build and run unit tests for code coverage
        run: |
            cmake ./pennylane_lightning/src -BBuild  -DBUILD_TESTS=ON -DENABLE_OPENMP=OFF -DENABLE_WARNINGS=OFF
            cmake --build ./Build --config Debug
            mkdir -p ./Build/tests/results
            .\Build\tests\Debug\runner.exe --order lex --reporter junit --out .\Build\tests\results\report_cpptests.xml
            OpenCppCoverage --sources pennylane_lightning\src --export_type cobertura:coverage.xml Build\tests\Debug\runner.exe
            Move-Item -Path .\coverage.xml -Destination .\coverage-${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: windows-test-report
          path: .\Build\tests\results\report_${{ github.job }}.xml

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: windows-coverage-report
          path: .\coverage-${{ github.job }}.xml


  win-set-matrix-x86:
    name: Set builder matrix
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3

      - name: Kokkos execution strategy
        id: exec_model
        run: echo "::set-output name=exec_model::[\"SERIAL\"]" # We may also adopt [OPENMP, THREADS] in later iterations

      - name: Kokkos version
        id: kokkos_version
        run: echo "::set-output name=kokkos_version::[\"3.7.00\"]"

    outputs:
      exec_model: ${{ steps.exec_model.outputs.exec_model }}
      kokkos_version: ${{ steps.kokkos_version.outputs.kokkos_version }}

  build_dependencies:
    needs: [win-set-matrix-x86]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        exec_model: ${{ fromJson(needs.win-set-matrix-x86.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.win-set-matrix-x86.outputs.kokkos_version) }}

    name: Kokkos core & kernels (${{ matrix.exec_model }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Cache installation directories
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: D:\a\install_dir\${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}-Debug

      - name: Clone Kokkos libs
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          cd D:\a
          git clone https://github.com/kokkos/kokkos.git
          cd D:\a\kokkos
          git checkout ${{ matrix.kokkos_version }}
          cd D:\a\
          git clone https://github.com/kokkos/kokkos-kernels.git
          cd D:\a\kokkos-kernels
          git checkout ${{ matrix.kokkos_version }}
          cd ..

      - name: Create installation directory
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: mkdir -p D:\a\install_dir\${{ matrix.exec_model }}

      - name: Install dependencies
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install cmake build

      - name: Build Kokkos core library
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          cd D:\a\kokkos
          cmake -BBuild . -DCMAKE_INSTALL_PREFIX=D:\a\install_dir\${{ matrix.exec_model }} `
                          -DKokkos_ENABLE_COMPLEX_ALIGN=OFF `
                          -DKokkos_ENABLE_${{ matrix.exec_model }}=ON `
                          -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF `
                          -DCMAKE_CXX_STANDARD=20 `
                          -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
                          -DCMAKE_BUILD_TYPE=Debug `
                          -T clangcl
          cmake --build ./Build --config Debug --verbose
          cmake --install ./Build --config Debug --verbose

      - name: Build Kokkos kernels library
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          cd D:\a\kokkos-kernels
          cmake -BBuild . -DCMAKE_INSTALL_PREFIX=D:\a\install_dir\${{ matrix.exec_model }} `
                          -DKokkos_ENABLE_${{ matrix.exec_model }}=ON `
                          -DCMAKE_CXX_STANDARD=20 `
                          -DCMAKE_PREFIX_PATH=D:\a\install_dir\${{ matrix.exec_model }} `
                          -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
                          -DCMAKE_BUILD_TYPE=Debug `
                          -T clangcl
          cmake --build ./Build --config Debug --verbose
          cmake --install ./Build --config Debug --verbose

  cpptestswithkokkos:
    needs: [build_dependencies, win-set-matrix-x86]
    strategy:
      matrix:
        os: [windows-2019]
        exec_model: ${{ fromJson(needs.win-set-matrix-x86.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.win-set-matrix-x86.outputs.kokkos_version) }}

    name: C++ tests (Windows, Kokkos and Kokkos Kernels)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: D:\a\install_dir\${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}-Debug

      - uses: actions/checkout@v3

      - name: Copy cached libraries
        if: steps.kokkos-cache.outputs.cache-hit == 'true'
        run: |
          Copy-Item -Path "D:\a\install_dir\${{ matrix.exec_model }}\" `
                    -Destination "D:\a\pennylane-lightning\pennylane-lightning\Kokkos" -Recurse -Force

      - name: Configure MSVC for amd64 # Use cl.exe as a default compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Enable long paths
        run: |
          powershell.exe New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Setup OpenCppCoverage and add to PATH
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Build and run unit tests for code coverage
        run: |
            Subst Z: (pwd)
            Set-Location -Path "Z:\"
            cmake ./pennylane_lightning/src -BBuild  -DBUILD_TESTS=ON -DENABLE_KOKKOS=ON -DCMAKE_PREFIX_PATH=D:\a\pennylane-lightning\pennylane-lightning\Kokkos -DENABLE_OPENMP=OFF -DENABLE_WARNINGS=OFF -T clangcl
            cmake --build ./Build --config Debug -- /p:UseMultiToolTask=true /p:EnforceProcessCountAcrossBuilds=true /p:MultiProcMaxCount=2
            mkdir -p ./Build/tests/results
            .\Build\tests\Debug\runner.exe --order lex --reporter junit --out .\Build\tests\results\report_${{ github.job }}.xml
            OpenCppCoverage --sources pennylane_lightning\src --export_type cobertura:coverage.xml Build\tests\Debug\runner.exe
            Move-Item -Path .\coverage.xml -Destination .\coverage-${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: windows-test-report
          path: .\Build\tests\results\report_${{ github.job }}.xml

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: windows-coverage-report
          path: .\coverage-${{ github.job }}.xml

  upload-to-codecov-windows:
    needs: [cpptests, cpptestswithKokkos]
    name: Upload coverage data to codecov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: windows-coverage-report

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
