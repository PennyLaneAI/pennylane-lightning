name: Testing::x86_64::LGPU::Python
on:
  workflow_call:
    inputs:
      lightning-version:
        type: string
        required: true
        description: The version of Lightning to use. Valid values are either 'release' (most recent release candidate), 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
      pennylane-version:
        type: string
        required: true
        description: The version of PennyLane to use. Valid values are either 'release' (most recent release candidate), 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
  release:
  pull_request:
    paths-ignore:
      - .github
      - '!.github/workflows/tests_lgpu_python.yml'
      - pennylane_lightning/core/src/simulators/lightning_kokkos/**
      - pennylane_lightning/core/src/simulators/lightning_qubit/**
      - pennylane_lightning/lightning_kokkos/**
      - pennylane_lightning/lightning_qubit/**
  push:
    branches:
      - master

env:
  CI_CUDA_ARCH: 86
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing --cov-report=xml:./coverage.xml --no-flaky-report -p no:warnings --tb=native"
  GCC_VERSION: 11
  TF_VERSION: 2.10.0
  TORCH_VERSION: 1.11.0+cpu

concurrency:
  group: tests_lgpu_python-${{ github.ref }}-${{ github.event }}-${{ inputs.lightning-version }}-${{ inputs.pennylane-version }}
  cancel-in-progress: true

jobs:
  builddeps:
    runs-on:
      - self-hosted
      - ubuntu-22.04
      - gpu

    strategy:
      max-parallel: 1
      matrix:
        cuda_version: ["12"]

    steps:
      - name: Validate GPU version and installed compiler
        run: |
          source /etc/profile.d/modules.sh
          module use /opt/modules
          module load cuda/${{ matrix.cuda_version }}
          echo "${PATH}" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          nvcc --version
          nvidia-smi

  pythontestswithLGPU:
    needs: [builddeps]
    strategy:
      matrix:
        pl_backend: ["lightning_gpu"]
        default_backend: ["lightning_qubit"]
        cuda_version: ["12"]

    name: Python tests with LGPU
    runs-on:
      - ubuntu-22.04
      - self-hosted
      - gpu

    steps:
      - name: Validate GPU version and installed compiler
        run: |
          source /etc/profile.d/modules.sh
          module use /opt/modules
          module load cuda/${{ matrix.cuda_version }}
          echo "${PATH}" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          nvcc --version
          nvidia-smi

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          path: main

      - name: Switch to release build of Lightning
        if: inputs.lightning-version == 'release'
        run: |
          cd main
          git fetch --all
          git checkout $(git branch -a --list "origin/v*rc*" | tail -1)

      - name: Switch to stable build of Lightning
        if: inputs.lightning-version == 'stable'
        run: |
          cd main
          git fetch --tags --force
          git checkout $(git tag | sort -V | tail -1)

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.9'

      - name: Setup Python virtual environment
        id: setup_venv
        env:
          VENV_NAME: ${{ github.workspace }}/venv_${{ steps.setup_python.outputs.python-version }}_${{ github.sha }}
        run: |
          # Clear any pre-existing venvs
          rm -rf venv_*

          # Create new venv for this workflow_run
          python --version
          python -m venv ${{ env.VENV_NAME }}

          # Add the venv to PATH for subsequent steps
          echo ${{ env.VENV_NAME }}/bin >> $GITHUB_PATH

          # Adding venv name as an output for subsequent steps to reference if needed
          source ${{ env.VENV_NAME }}/bin/activate
          echo "venv_name=${{ env.VENV_NAME }}" >> $GITHUB_OUTPUT

      - name: Display Python-Path
        id: python_path
        run: |
          py_path=$(which python)
          echo "Python Interpreter Path => $py_path"
          echo "python=$py_path" >> $GITHUB_OUTPUT
          
          pip_path=$(which python)
          echo "PIP Path => $pip_path"
          echo "pip=$pip_path" >> $GITHUB_OUTPUT

      - name: Install required packages
        run: |
          cd main
          python -m pip install -r requirements-dev.txt
          python -m pip install cmake custatevec-cu${{ matrix.cuda_version }} openfermionpyscf

      - name: Checkout PennyLane for release build
        if: inputs.pennylane-version == 'release'
        uses: actions/checkout@v4
        with:
          path: pennylane
          repository: PennyLaneAI/pennylane

      - name: Switch to release build of PennyLane
        if: inputs.pennylane-version == 'release'
        run: |
          cd pennylane
          git fetch --all
          git checkout $(git branch -a --list "origin/v*rc*" | tail -1)
          python -m pip uninstall -y pennylane && python -m pip install . -vv --no-deps

      - name: Install Stable PennyLane
        if: inputs.pennylane-version == 'stable'
        run: |
          cd main
          python -m pip uninstall -y pennylane && python -m pip install -U pennylane

      - name: Build and install package
        env: 
          CUQUANTUM_SDK: $(python -c "import site; print( f'{site.getsitepackages()[0]}/cuquantum')")
        run: |
          cd main
          rm -rf build
          CMAKE_ARGS="-DPL_BACKEND=${{ matrix.default_backend }} -DENABLE_PYTHON=ON -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)" \
          python -m pip install . -vv
          rm -rf build

          rm -rf build
          CMAKE_ARGS="-DPL_BACKEND=${{ matrix.pl_backend }} -DENABLE_PYTHON=ON -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) -DPython_EXECUTABLE=${{ steps.python_path.outputs.python }}" \
          python -m pip install . -vv

      - name: Run PennyLane-Lightning-GPU unit tests
        if: ${{ matrix.pl_backend != 'all'}}
        env: 
          OMP_NUM_THREADS: 1
          OMP_PROC_BIND: false
        run: |
          cd main/
          DEVICENAME=`echo ${{ matrix.pl_backend }} | sed "s/_/./g"`
          pl-device-test --device ${DEVICENAME} --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append 
          pl-device-test --device ${DEVICENAME} --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          PL_DEVICE=${DEVICENAME} python -m pytest tests/ $COVERAGE_FLAGS 
          mv coverage.xml coverage-${{ github.job }}-${{ matrix.pl_backend }}.xml

      - name: Install all backend devices
        if: ${{ matrix.pl_backend == 'all' }}
        env: 
          CUQUANTUM_SDK: $(python -c "import site; print( f'{site.getsitepackages()[0]}/cuquantum')")
        run: |
          cd main
          rm -rf build
          CMAKE_ARGS="-DPL_BACKEND=${{matrix.default_backend}} -DENABLE_PYTHON=ON -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)" \
          python -m pip install . -vv
          rm -rf build
          
          CMAKE_ARGS="-DPL_BACKEND=${{ matrix.pl_backend }} -DENABLE_PYTHON=ON -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION)" \
          python -m pip install . -vv

      - name: Run PennyLane-Lightning unit tests for lightning.qubit with all devices installed
        if: ${{ matrix.pl_backend == 'all' }}
        env: 
          OMP_NUM_THREADS: 1
          OMP_PROC_BIND: false
        run: |
          cd main/
          PL_DEVICE=lightning.qubit python -m pytest tests/ -k "not test_native_mcm" $COVERAGE_FLAGS
          pl-device-test --device lightning.qubit --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.qubit --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          PL_DEVICE=lightning.gpu python -m pytest tests/ $COVERAGE_FLAGS
          pl-device-test --device lightning.gpu --skip-ops --shots=20000 $COVERAGE_FLAGS --cov-append
          pl-device-test --device lightning.gpu --shots=None --skip-ops $COVERAGE_FLAGS --cov-append
          mv coverage.xml coverage-${{ github.job }}-${{ matrix.pl_backend }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./main/coverage-${{ github.job }}-${{ matrix.pl_backend }}.xml
          if-no-files-found: error

  upload-to-codecov-linux-python:
    needs: [pythontestswithLGPU]
    name: Upload coverage data to codecov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-codecov-results-python

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
