name: Wheel::Linux::ARM

# **What it does**: Builds python wheels for Linux (ubuntu-latest) architecture ARM 64 and store it as artifacts.
#                   Python versions: 3.7, 3.8, 3.9, 3.10.
# **Why we have it**: To build wheels for pennylane-lightning installation.
# **Who does it impact**: Wheels to be uploaded to PyPI.

on:
  push:
    branches:
      - master
  release:
    types: [published]

env:
  PYTHON3_MIN_VERSION: "7"
  PYTHON3_MAX_VERSION: "10"

jobs:
  linux-set-matrix-aarch64:
    name: Set builder matrix
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - name: Python version
        id: pyver
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }})"
          else
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }} \
              --range)"
          fi

      - name: Kokkos execution strategy
        id: exec_model
        run: echo "::set-output name=exec_model::[\"SERIAL\"]" # We may also adopt [OPENMP, THREADS] in later iterations

      - name: Kokkos version
        id: kokkos_version
        run: echo "::set-output name=kokkos_version::[\"3.6.00\"]"

    outputs:
      matrix: ${{ steps.pyver.outputs.matrix }}
      exec_model: ${{ steps.exec_model.outputs.exec_model }}
      kokkos_version: ${{ steps.kokkos_version.outputs.kokkos_version }}

  build_dependencies:
    needs: [linux-set-matrix-aarch64]
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [aarch64]
        exec_model: ${{ fromJson(needs.linux-set-matrix-aarch64.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.linux-set-matrix-aarch64.outputs.kokkos_version) }}
        container_img: ["quay.io/pypa/manylinux2014_aarch64"]

    name: Kokkos core & kernels (${{ matrix.exec_model }}::${{ matrix.arch }} )
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Cache installation directories
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.container_img }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Clone Kokkos libs
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/kokkos/kokkos.git
          cd kokkos
          git checkout ${{ matrix.kokkos_version }}
          cd -
          pushd . &> /dev/null
          git clone https://github.com/kokkos/kokkos-kernels.git
          cd kokkos-kernels
          git checkout ${{ matrix.kokkos_version }}
          cd -

      - uses: docker/setup-qemu-action@v2
        name: Set up QEMU

      - name: Build Kokkos core library
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          cd kokkos
          docker run --platform linux/aarch64 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v `pwd`:/io \
            -v ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}:/install \
            -i ${{ matrix.container_img }} \
            bash -c "cd /io && \
            python3.7 -m pip install ninja && \
            ln -s /opt/python/cp37-cp37m/bin/ninja /usr/bin/ninja && \
            cmake -BBuild . -DCMAKE_INSTALL_PREFIX=/install \
                            -DKokkos_ENABLE_COMPLEX_ALIGN=OFF \
                            -DKokkos_ENABLE_${{ matrix.exec_model }}=ON \
                            -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
                            -DCMAKE_CXX_STANDARD=20 \
                            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                            -G Ninja && \
            cmake --build ./Build --verbose && \
            cmake --install ./Build; "
          cd -
      - name: Build Kokkos kernels library
        if: steps.kokkos-cache.outputs.cache-hit != 'true'
        run: |
          cd kokkos-kernels
          docker run --platform linux/aarch64 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v `pwd`:/io \
            -v ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}:/install \
            -i ${{ matrix.container_img }} \
            bash -c "cd /io && \
            python3.7 -m pip install ninja && \
            ln -s /opt/python/cp37-cp37m/bin/ninja /usr/bin/ninja && \
            cmake -BBuild . -DCMAKE_INSTALL_PREFIX=/install \
                            -DKokkos_ENABLE_${{ matrix.exec_model }}=ON \
                            -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
                            -DCMAKE_CXX_STANDARD=20 \
                            -DCMAKE_PREFIX_PATH=/install \
                            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                            -G Ninja && \
            cmake --build ./Build --verbose && \
            cmake --install ./Build; "
          cd -

  linux-wheels-aarch64:
    needs: [linux-set-matrix-aarch64, build_dependencies]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [aarch64]
        cibw_build: ${{ fromJson(needs.linux-set-matrix-aarch64.outputs.matrix) }}
        exec_model: ${{ fromJson(needs.linux-set-matrix-aarch64.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.linux-set-matrix-aarch64.outputs.kokkos_version) }}
        container_img: ["quay.io/pypa/manylinux2014_aarch64"]

    name: ubuntu-latest::aarch64 (Python ${{ fromJson('{ "cp37-*":"3.7","cp38-*":"3.8","cp39-*":"3.9","cp310-*":"3.10" }')[matrix.cibw_build] }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v3

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.container_img }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        run: |
          mkdir Kokkos
          cp -rf ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/

      - name: Install cibuildwheel
        run: python3 -m pip install cibuildwheel==2.8.1

      - uses: docker/setup-qemu-action@v2
        name: Set up QEMU

      - name: Build wheels
        env:
          CIBW_ARCHS_LINUX: ${{matrix.arch}}

          CIBW_BUILD: ${{ matrix.cibw_build }}

          CIBW_SKIP: "*-musllinux*"

          # Python build settings
          CIBW_BEFORE_BUILD: |
            cat /etc/yum.conf | sed "s/\[main\]/\[main\]\ntimeout=5/g" > /etc/yum.conf
            pip install ninja cmake

          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014

          CIBW_BUILD_VERBOSITY: 3

        run: python3 -m cibuildwheel --output-dir wheelhouse

      - uses: actions-ecosystem/action-regex-match@v2
        id: rc_build
        with:
          text: ${{ github.event.pull_request.head.ref }}
          regex: '.*[0-9]+.[0-9]+.[0-9]+[-_]?rc[0-9]+'

      - uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master' }}
        with:
          name: ${{ runner.os }}-wheels-${{ matrix.arch }}.zip
          path: ./wheelhouse/*.whl

  upload-pypi:
    needs: linux-wheels-aarch64
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master'}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Linux-wheels-aarch64.zip
          path: dist

      - name: Upload wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
