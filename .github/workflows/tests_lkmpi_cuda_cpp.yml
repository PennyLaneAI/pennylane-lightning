name: Testing::x86_64::LK-MPI-CUDA::C++
on:
  workflow_call:
    inputs:
      lightning-version:
        type: string
        required: true
        description: The version of lightning to use. Valid values are either 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
      pennylane-version:
        type: string
        required: true
        description: The version of PennyLane to use. Valid values are either 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    paths:
      - .github/workflows/tests_lkmpi_cuda_cpp.yml
      - pennylane_lightning/core/**
      - '!pennylane_lightning/core/simulators/lightning_gpu/**'
      - '!pennylane_lightning/core/simulators/lightning_qubit/**'
      - '!pennylane_lightning/core/simulators/lightning_tensor/**'

env:
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing --cov-report=xml:./coverage.xml -p no:warnings --tb=native"
  GCC_VERSION: 13
  OMP_NUM_THREADS: "1"
  CI_CUDA_ARCH: 86

concurrency:
  group: tests_lkmpi_cuda_cpp-${{ github.ref }}-${{ github.event_name }}-${{ inputs.lightning-version }}-${{ inputs.pennylane-version }}
  cancel-in-progress: true

jobs:
  cpp_tests:
    if: ${{ github.event.pull_request.draft == false && (contains(github.event.pull_request.labels.*.name, 'ci:use-multi-gpu-runner') || contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name)) }}
    runs-on:
      - multi-gpu-x64

    strategy:
      max-parallel: 1
      matrix:
        mpilib: ["mpich", "openmpi"]
        kokkos_version: ["4.5.00"]
        exec_model: ["CUDA"]
        cuda_version_maj: ["12"]
        cuda_version_min: ["4"]
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst

      - name: Switch to stable build of Lightning-Kokkos
        if: inputs.lightning-version == 'stable'
        run: |
          git fetch tags --force
          git checkout latest_release

      - uses: actions/setup-python@v5
        id: setup_python
        name: Install Python
        with:
          python-version: '3.12'

      # Since the self-hosted runner can be re-used. It is best to set up all package
      # installations in a virtual environment that gets cleaned at the end of each workflow run
      - name: Setup Python virtual environment
        id: setup_venv
        env:
          VENV_NAME: ${{ github.workspace }}/venv_${{ steps.setup_python.outputs.python-version }}_${{ github.sha }}
        run: |
          # Clear any pre-existing venvs
          rm -rf venv_*

          # Create new venv for this workflow_run
          python --version
          python -m venv ${{ env.VENV_NAME }}

          # Add the venv to PATH for subsequent steps
          echo ${{ env.VENV_NAME }}/bin >> $GITHUB_PATH

          # Adding venv name as an output for subsequent steps to reference if needed
          echo "venv_name=${{ env.VENV_NAME }}" >> $GITHUB_OUTPUT
          echo "Python_ROOT_DIR=${{ env.VENV_NAME }}" >> $GITHUB_ENV
          echo "Python3_ROOT_DIR=${{ env.VENV_NAME }}" >> $GITHUB_ENV

      - name: Display Python-Path
        id: python_path
        run: |
          py_path=$(which python)
          echo "Python Interpreter Path => $py_path"
          echo "python=$py_path" >> $GITHUB_OUTPUT

          pip_path=$(which python)
          echo "PIP Path => $pip_path"
          echo "pip=$pip_path" >> $GITHUB_OUTPUT

      - name: Install required packages
        run: |
          python -m pip install -r requirements-tests.txt
          python -m pip install cmake scipy

      - name: Validate GPU version and installed compiler and modules
        run: |
          source /etc/profile.d/modules.sh && module use /opt/modules && module load cuda/${{ matrix.cuda_version_maj }}
          which -a nvcc
          nvcc --version
          ls -R /opt/modules

      - name: Validate Multi-GPU packages
        run: |
          source /etc/profile.d/modules.sh && module use /opt/modules/ && module load ${{ matrix.mpilib }}
          echo 'Checking for ${{ matrix.mpilib }}'
          which -a mpirun
          mpirun --version
          which -a mpicxx
          mpicxx --version
          module unload ${{ matrix.mpilib }}

      - name: Clone Kokkos repository
        run: |
          rm -rf kokkos_${{ matrix.exec_model }}
          git clone --branch ${{ matrix.kokkos_version }} https://github.com/kokkos/kokkos.git kokkos_${{ matrix.exec_model }}
          pushd . &> /dev/null

      - name: Build Kokkos core library (Ubuntu)
        run: |
          source /etc/profile.d/modules.sh && module use /opt/modules/ && module load ${{ matrix.mpilib }}
          rm -rf ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          mkdir -p ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          cd kokkos_${{ matrix.exec_model }}
          cmake -BBuild . -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }} \
                          -DKokkos_ENABLE_COMPLEX_ALIGN=OFF \
                          -DKokkos_ENABLE_SERIAL=ON \
                          -DKokkos_ENABLE_${{ matrix.exec_model }}=ON \
                          -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
                          -DCMAKE_CXX_COMPILER=mpicxx \
                          -DCMAKE_CXX_STANDARD=20 \
                          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                          -G Ninja
          cmake --build ./Build --verbose
          cmake --install ./Build
          cd -

      - name: Build and run unit tests
        run: |
          source /etc/profile.d/modules.sh && module use /opt/modules/ && module load ${{ matrix.mpilib }}
          export SCIPY_OPENBLAS=$(python -c "import scipy_openblas32; print(scipy_openblas32.get_lib_dir())")
          cmake . -BBuild \
            -DPL_BACKEND=lightning_kokkos \
            -DENABLE_PYTHON=OFF \
            -DENABLE_MPI=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebugInfo \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }} \
            -DENABLE_COVERAGE=ON \
            -DBUILD_TESTS=ON \
            -DCMAKE_CXX_COMPILER=mpicxx \
            -DSCIPY_OPENBLAS=${SCIPY_OPENBLAS} \
            -DPython_EXECUTABLE:FILE="${{ steps.python_path.outputs.python }}" \
            -G Ninja \
            -DLIGHTNING_CATALYST_SRC_PATH=${{ github.workspace }}/catalyst
          cmake --build ./Build
          cd ./Build
          mkdir -p ./tests/results
          test_status=0
          for file in *runner ; do ./$file  --reporter junit --out ./tests/results/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results/report_$file.xml; test_status=1; } done;
          for file in lightning_kokkos*runner_mpi ; do mpirun -np 4 ./$file --reporter junit --out ./tests/results/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results/report_$file.xml; test_status=1; } done;
          for file in utils_*runner_mpi ; do mpirun -np 2 ./$file --reporter junit --out ./tests/results/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results/report_$file.xml; test_status=1; } done;
          if [ $test_status -ne 0 ]; then
            echo "Tests failed. Exiting with error code."
            exit 1
          fi
          lcov --directory . -b ../pennylane_lightning/core --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          mv coverage.info coverage-${{ github.job }}-lightning_kokkos_mpi_cuda_${{ matrix.mpilib }}.info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubuntu-tests-reports-${{ matrix.mpilib }}
          path: ./Build/tests/results/
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-codecov-results-cpp-${{ matrix.mpilib }}
          path: ./Build/coverage-${{ github.job }}-lightning_kokkos_mpi_cuda_${{ matrix.mpilib }}.info
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

      - name: Cleanup
        if: always()
        run: |
          rm -rf ${{ steps.setup_venv.outputs.venv_name }}
          rm -rf ${{ github.workspace }}/Kokkos_install/${{ matrix.exec_model }}
          rm -rf kokkos_${{ matrix.exec_model }}
          rm -rf * .git .gitignore .github
          pip cache purge

  upload-to-codecov-linux-cpp:
    needs: ["cpp_tests"]
    name: Upload coverage data to codecov
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: ubuntu-codecov-*
          merge-multiple: true

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit_tests

      - name: Cleanup
        if: always()
        run: |
          rm -rf ${{ steps.setup_venv.outputs.venv_name }}
          rm -rf * .git .gitignore .github
          pip cache purge
