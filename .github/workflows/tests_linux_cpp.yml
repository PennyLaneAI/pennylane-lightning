name: Testing::x86_64::C++
on:
  workflow_call:
    inputs:
      lightning-version:
        type: string
        required: true
        description: The version of Lightning to use. Valid values are either 'release' (most recent release candidate), 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
      pennylane-version:
        type: string
        required: true
        description: The version of PennyLane to use. Valid values are either 'release' (most recent release candidate), 'stable' (most recent git-tag) or 'latest' (most recent commit from master)
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    paths:
      - .github/workflows/tests_linux_cpp.yml
      - pennylane_lightning/core/**
      - '!pennylane_lightning/core/simulators/lightning_gpu/**'
      - '!pennylane_lightning/core/simulators/lightning_tensor/**'

  push:
    branches:
      - master

env:
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing -p no:warnings --tb=native"
  GCC_VERSION: 13
  OMP_NUM_THREADS: "2"
  OMP_PROC_BIND: "false"

concurrency:
  group: tests_linux_cpp-${{ github.ref }}-${{ github.event_name }}-${{ inputs.lightning-version }}-${{ inputs.pennylane-version }}
  cancel-in-progress: true

jobs:
  cpptests:
    if: ${{ !contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
    strategy:
      matrix:
        pl_backend: ["lightning_qubit"]
        enable_kernel_omp: ["OFF", "ON"]
        enable_kernel_avx_streaming: ["OFF", "ON"]
        exclude:
        - enable_kernel_omp: OFF
          enable_kernel_avx_streaming: ON
    timeout-minutes: 60
    name: C++ Tests (${{ matrix.pl_backend }}, ENABLE_KERNEL_OMP=${{ matrix.enable_kernel_omp }}, ENABLE_KERNEL_AVX_STREAMING=${{ matrix.enable_kernel_avx_streaming }})
    runs-on: pl-4-core-large-runner

    steps:
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst

      - name: Install dependencies
        run: |
            echo ${{ github.event_name }} && sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION ninja-build gcovr lcov
            python -m pip install scipy-openblas32

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTS=ON \
              -DENABLE_PYTHON=OFF \
              -DSCIPY_OPENBLAS=$(python -c "import scipy_openblas32; print(scipy_openblas32.get_lib_dir())") \
              -DPL_BACKEND=${{ matrix.pl_backend }} \
              -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) \
              -DENABLE_COVERAGE=ON \
              -DLQ_ENABLE_KERNEL_AVX_STREAMING=${{ matrix.enable_kernel_avx_streaming }} \
              -DLQ_ENABLE_KERNEL_OMP=${{ matrix.enable_kernel_omp }} \
              -DLIGHTNING_CATALYST_SRC_PATH=${{ github.workspace }}/catalyst

            cmake --build ./Build

            cd ./Build
            mkdir -p ./tests/results
            test_status=0
            for file in *runner ; do 
              ./$file  --reporter junit --out ./tests/results/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results/report_$file.xml; test_status=1; }; 
            done;
            if [ $test_status -ne 0 ]; then
              echo "Tests failed. Exiting with error code."
              exit 1
            fi
            lcov --directory . -b ../pennylane_lightning/core --capture --output-file coverage.info  --ignore-errors mismatch # Catch2 causes mismatch errors that needs to be ignored
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}-${{ matrix.pl_backend }}-${{ matrix.enable_kernel_avx_streaming }}-${{ matrix.enable_kernel_omp }}.info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubuntu-tests-reports-${{ github.job }}-${{ matrix.pl_backend }}-${{ matrix.enable_kernel_avx_streaming }}-${{ matrix.enable_kernel_omp }}
          retention-days: 1
          include-hidden-files: true
          path: |
            ./Build/tests/results/

          if-no-files-found: error

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-codecov-results-${{ matrix.pl_backend }}-${{ matrix.enable_kernel_avx_streaming }}-${{ matrix.enable_kernel_omp }}
          path: ./Build/coverage-${{ github.job }}-${{ matrix.pl_backend }}-${{ matrix.enable_kernel_avx_streaming }}-${{ matrix.enable_kernel_omp }}.info
          if-no-files-found: error

  cpptestswithOpenBLAS:
    if: ${{ !contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
    strategy:
      matrix:
        pl_backend: ["lightning_qubit"]
    timeout-minutes: 60
    name: C++ Tests (${{ matrix.pl_backend }}, blas-ON)
    runs-on: pl-4-core-large-runner

    steps:
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION libopenblas-dev ninja-build gcovr lcov
          python -m pip install scipy-openblas32

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DENABLE_PYTHON=OFF \
              -DENABLE_BLAS=ON \
              -DPL_BACKEND=${{ matrix.pl_backend }} \
              -DSCIPY_OPENBLAS=$(python -c "import scipy_openblas32; print(scipy_openblas32.get_lib_dir())") \
              -DBUILD_TESTS=ON \
              -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) \
              -DENABLE_COVERAGE=ON \
              -DLIGHTNING_CATALYST_SRC_PATH=${{ github.workspace }}/catalyst
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            test_status=0
            for file in *runner ; do 
              ./$file  --reporter junit --out ./tests/results/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results/report_$file.xml; test_status=1; };
            done;
            if [ $test_status -ne 0 ]; then
              echo "Tests failed. Exiting with error code."
              exit 1
            fi
            lcov --directory . -b ../pennylane_lightning/core --capture --output-file coverage.info  --ignore-errors mismatch # Catch2 causes mismatch errors that needs to be ignored
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}-${{ matrix.pl_backend }}.info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubuntu-tests-reports-blas-${{ github.job }}-${{ matrix.pl_backend }}
          path: ./Build/tests/results/
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-codecov-results-blas-${{ matrix.pl_backend }}
          path: ./Build/coverage-${{ github.job }}-${{ matrix.pl_backend }}.info
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

  build_and_cache_Kokkos:
    name: "Build and cache Kokkos"
    uses: ./.github/workflows/build_and_cache_Kokkos_linux.yml
    with:
      runs_on: pl-4-core-large-runner
      os: ubuntu-24.04

  cpptestswithKokkos:
    if: ${{ !contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-24.04]
        pl_backend: ["lightning_kokkos"]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}
    timeout-minutes: 60
    name: C++ Tests (${{ matrix.pl_backend }}, kokkos-${{ matrix.kokkos_version }}, model-${{ matrix.exec_model }})
    runs-on: pl-4-core-large-runner

    steps:
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        if: steps.kokkos-cache.outputs.cache-hit == 'true'
        run: |
          rm -rf Kokkos
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION ninja-build gcovr lcov
          python -m pip install scipy-openblas32

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTS=ON \
              -DENABLE_PYTHON=OFF \
              -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos \
              -DPL_BACKEND=${{ matrix.pl_backend }} \
              -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) \
              -DSCIPY_OPENBLAS=$(python -c "import scipy_openblas32; print(scipy_openblas32.get_lib_dir())") \
              -DENABLE_COVERAGE=ON \
              -DLIGHTNING_CATALYST_SRC_PATH=${{ github.workspace }}/catalyst
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results-${{ github.job }}-${{ matrix.pl_backend }}
            test_status=0
            for file in *runner ; do 
              report_file="./tests/results-${{ github.job }}-${{ matrix.pl_backend }}/report_$file.xml";
              ./$file --reporter junit --out $report_file && echo "Test $file Success!" || { cat $report_file; test_status=1; }
            done;
            if [ $test_status -ne 0 ]; then
              echo "Tests failed. Exiting with error code."
              exit 1
            fi
            lcov --directory . -b ../pennylane_lightning/core --capture --output-file coverage.info  --ignore-errors mismatch # Catch2 causes mismatch errors that needs to be ignored
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}-${{ matrix.pl_backend }}.info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubuntu-tests-reports-${{ github.job }}-${{ matrix.pl_backend }}
          path: ./Build/tests/results-${{ github.job }}-${{ matrix.pl_backend }}
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-codecov-results-cpp-${{ github.job }}-${{ matrix.pl_backend }}
          path: ./Build/coverage-${{ github.job }}-${{ matrix.pl_backend }}.info
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true

  upload-to-codecov-linux-cpp:
    needs: [cpptests, cpptestswithOpenBLAS, cpptestswithKokkos]
    name: Upload cpp coverage data to codecov
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: ubuntu-codecov-*
          merge-multiple: true

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit_tests

  cpptestsWithMultipleBackends:
  # Device-specific tests are performed for both. Device-agnostic tests default to LightningQubit.
    if: ${{ !contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
    needs: [build_and_cache_Kokkos]
    strategy:
      matrix:
        os: [ubuntu-24.04]
        exec_model: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.exec_model) }}
        kokkos_version: ${{ fromJson(needs.build_and_cache_Kokkos.outputs.kokkos_version) }}
    timeout-minutes: 60
    name: C++ Tests (multiple-backends, kokkos-${{ matrix.kokkos_version }}, model-${{ matrix.exec_model }})
    runs-on: pl-4-core-large-runner

    steps:
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst

      - name: Restoring cached dependencies
        id: kokkos-cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}
          key: ${{ matrix.os }}-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}

      - name: Copy cached libraries
        if: steps.kokkos-cache.outputs.cache-hit == 'true'
        run: |
          rm -rf Kokkos
          mkdir Kokkos/
          cp -rf ${{ github.workspace}}/Kokkos_install/${{ matrix.exec_model }}/* Kokkos/

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION ninja-build gcovr lcov
          python -m pip install scipy-openblas32

      - name: Build and run unit tests
        run: |
            cmake . -BBuild -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTS=ON \
              -DENABLE_PYTHON=OFF \
              -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Kokkos \
              -DPL_BACKEND="lightning_qubit;lightning_kokkos" \
              -DSCIPY_OPENBLAS=$(python -c "import scipy_openblas32; print(scipy_openblas32.get_lib_dir())") \
              -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) \
              -DLIGHTNING_CATALYST_SRC_PATH=${{ github.workspace }}/catalyst
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results_multiple_backends
            test_status=0
            for file in *runner ; do 
              ./$file  --reporter junit --out ./tests/results_multiple_backends/report_$file.xml && echo "Test $file Success!" || { cat ./tests/results_multiple_backends/report_$file.xml; test_status=1; };
            done;
            if [ $test_status -ne 0 ]; then
              echo "Tests failed. Exiting with error code."
              exit 1
            fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubuntu-tests-reports-${{ github.job }}-multiple-backends-kokkos${{ matrix.kokkos_version }}-${{ matrix.exec_model }}
          path: ./Build/tests/results_multiple_backends/
          retention-days: 1
          if-no-files-found: error
          include-hidden-files: true
