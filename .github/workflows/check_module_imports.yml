name: Check Module Imports
permissions:
  contents: read
on:
  pull_request:
  push:
    branches:
      - master

env:
  TF_VERSION: 2.19.0
  KERAS_VERSION: 3.9.0
  TORCH_VERSION: 2.5.1
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing -p no:warnings --tb=native"
  GCC_VERSION: 13
  OMP_NUM_THREADS: "2"
  OMP_PROC_BIND: "false"

jobs:
  check_module_imports:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Checkout Catalyst
        uses: actions/checkout@v4
        with:
          repository: PennyLaneAI/catalyst
          path: ${{ github.workspace}}/catalyst
          ref: ${{ (inputs.pennylane-version == 'stable' && 'v0.11.0') || 'main' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION g++-$GCC_VERSION libopenblas-dev
          python -m pip install --upgrade pip
          python -m pip install scipy-openblas32 wheel build
          python -m pip install -r requirements-tests.txt
          python -m pip install -e . --config-settings editable_mode=compat -vv

      - name: Check basic imports
        run: |
          python -c "import pennylane_lightning"
          python -c "from pennylane_lightning import lightning_qubit"
          python -c "from pennylane_lightning import lightning_kokkos"
          python -c "from pennylane_lightning import lightning_gpu"
          python -c "from pennylane_lightning import lightning_tensor"

      - name: Check available binaries
        run: |
          echo "Checking available binary modules..."
          python - <<EOF
          import sys
          import importlib
          import pennylane_lightning

          # Print all loaded modules that contain 'lightning'
          lightning_modules = [name for name in sys.modules if "lightning" in name]
          print(f"Loaded Lightning modules: {lightning_modules}")

          # Check each backend for binary availability
          backends = ["qubit", "kokkos", "gpu", "tensor"]

          for backend in backends:
              # Check for pybind11 module
              pybind_module = f"pennylane_lightning.lightning_{backend}_ops"
              has_pybind = hasattr(pennylane_lightning, f"lightning_{backend}_ops")

              # Check for nanobind module
              nanobind_module = f"pennylane_lightning.lightning_{backend}_nb"
              has_nanobind = hasattr(pennylane_lightning, f"lightning_{backend}_nb")

              print(f"\nBackend: lightning.{backend}")
              print(f"  Pybind11 module available: {has_pybind}")
              print(f"  Nanobind module available: {has_nanobind}")

              # Try to import the main device class
              try:
                  if backend == "tensor":
                      module_path = f"pennylane_lightning.lightning_{backend}"
                      module = importlib.import_module(module_path)
                      device_class = f"LightningTensor"
                  else:
                      module_path = f"pennylane_lightning.lightning_{backend}"
                      module = importlib.import_module(module_path)
                      device_class = f"Lightning{backend.capitalize()}" if backend != "qubit" else "LightningQubit"
                      if backend == "gpu":
                          device_class = "LightningGPU"

                  device = getattr(module, device_class)
                  binary_available = getattr(device, "_CPP_BINARY_AVAILABLE", False)
                  print(f"  {device_class}._CPP_BINARY_AVAILABLE: {binary_available}")
              except (ImportError, AttributeError) as e:
                  print(f"  Error importing {device_class}: {str(e)}")

          # If both pybind11 and nanobind modules are loaded for any backend, print a warning
          for backend in backends:
              pybind_module = f"pennylane_lightning.lightning_{backend}_ops"
              nanobind_module = f"pennylane_lightning.lightning_{backend}_nb"

              if pybind_module in sys.modules and nanobind_module in sys.modules:
                  print(f"\nWARNING: Both pybind11 ({pybind_module}) and nanobind ({nanobind_module}) modules are loaded!")
          EOF

      - name: Run adjoint Jacobian tests
        run: |
          python -m pytest tests/test_adjoint_jacobian.py -s
