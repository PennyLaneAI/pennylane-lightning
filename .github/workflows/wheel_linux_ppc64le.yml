name: Wheel::Linux::PowerPC

# **What it does**: Build python wheels for Linux (ubuntu-latest) architecture PowerPC 64 and store it as artifacts.
#                   Python versions: 3.7, 3.8, 3.9, 3.10.
# **Why we have it**: To build wheels for pennylane-lightning installation.
# **Who does it impact**: Wheels to be uploaded to PyPI.

on:
  push:
    branches:
      - master
  release:
    types: [published]

env:
  PYTHON3_MIN_VERSION: "7"
  PYTHON3_MAX_VERSION: "10"

jobs:
  linux-set-matrix-ppc64le:
    name: Set builder matrix versions
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - id: pyver
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }})"
          else
            echo "::set-output name=matrix::$(python3 .github/workflows/gen_pyver_matrix.py \
              --min-version=3.${{ env.PYTHON3_MIN_VERSION }} \
              --max-version=3.${{ env.PYTHON3_MAX_VERSION }} \
              --range)"
          fi
    outputs:
      matrix: ${{ steps.pyver.outputs.matrix }}

  linux-wheels-ppc64le:
    needs: [linux-set-matrix-ppc64le]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [ppc64le]
        cibw_build: ${{fromJson(needs.linux-set-matrix-ppc64le.outputs.matrix)}}

    name: ubuntu-latest::ppc64le (Python ${{ fromJson('{ "cp37-*":"3.7","cp38-*":"3.8","cp39-*":"3.9","cp310-*":"3.10" }')[matrix.cibw_build] }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - uses: docker/setup-qemu-action@v1
        name: Set up QEMU

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.3.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_SKIP: "*-musllinux*"

          # Python build settings
          CIBW_BEFORE_BUILD: |
            pip install pybind11 ninja cmake && yum install -y gcc gcc-c++

          # Skip PPC tests due to lack of numpy/scipy wheel support
          CIBW_TEST_SKIP: "*-manylinux_{ppc64le}"

          CIBW_BEFORE_TEST: pip install git+https://github.com/PennyLaneAI/pennylane.git@master

          # Use CentOS 7 image for PPC
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux2014

          CIBW_ARCHS_LINUX: ${{matrix.arch}}

      - uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master' }}
        with:
          name: ${{ runner.os }}-wheels-${{ matrix.arch }}.zip
          path: ./wheelhouse/*.whl

  upload-pypi:
    needs: linux-wheels-ppc64le
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || github.ref == 'refs/heads/master'}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Linux-wheels-ppc64le.zip
          path: dist

      - name: Upload wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
